 class Kurta: public Product {
    string fabric;
 public:
     Kurta(int id, string name, double price, string fabric)
         : Product(id, name, price), fabric(fabric) {}

     void display() const override {
         Product::display();
         cout << "Fabric: " << fabric << ", Category: Fabric\n";
     }

     string getCategory() const override { return "Kurta"; }
     string getExtra() const override { return fabric; }
 };
     void searchProduct() const {
     int choice;
     cout << "\nSearch by:\n1. ID\n2. Name\nChoose option: ";
     cin >> choice;

    if (choice == 1) {
         int id;
         cout << "Enter Product ID: ";
         cin >> id;
         for (int i = 0; i < count; ++i) {
             if (products[i]->getId() == id) {
                cout << "Product found:\n";
                 products[i]->display();
                 return;
             }
         }
         cout << "No product found with ID " << id << endl;
     }

     else if (choice == 2) {
         string name;
         cout << "Enter Product Name: ";
         cin.ignore();
         getline(cin, name);
         bool found = false;

         for (int i = 0; i < count; ++i) {
             if (products[i]->getName() == name) {
                 if (!found) cout << "Matching product(s):\n";
                 products[i]->display();
                 found = true;
             }
       }

         if (!found) {
             cout << "No product found with name '" << name << "'\n";
         }
     }

     else {
         cout << "Invalid choice.\n";
     }
 }
    
     void updateProduct(int id) {
     for (int i = 0; i < count; ++i) {
         if (products[i]->getId() == id) {
             string newName;
             double newPrice;

             cout << "Enter new name: ";
             cin.ignore();
             getline(cin, newName);

             cout << "Enter new price: ";
             cin >> newPrice;

             string category = products[i]->getCategory();

             if (category == "TShirt") {
                 string newSize;
                 cout << "Enter new size: ";
                cin >> newSize; 
                  delete products[i];
                 products[i] = new TShirt(id, newName, newPrice, newSize);
             }
             else if (category == "Hoodie") {
                 string newMaterial;
                 cout << "Enter new material: ";
                 cin >> newMaterial;
                 delete products[i];
                 products[i] = new Hoodie(id, newName, newPrice, newMaterial);
             }
             else if (category == "Kurta") {
                 string newFabric;
                 cout << "Enter new fabric: ";
                 cin >> newFabric;
                 delete products[i];
                 products[i] = new Kurta(id, newName, newPrice, newFabric);
             }
             else if (category == "Trouser") {
                 int newWaist;
                 cout << "Enter new waist: ";
                 cin >> newWaist;
                 delete products[i];
                 products[i] = new Trouser(id, newName, newPrice, newWaist);
             }

             cout << "Product updated successfully!\n";
             saveToFile();
             return;
         }
     }

     cout << "Product with ID " << id << " not found.\n";
}

  case 6:
         {
    
        cout << "Enter ID to update: ";
             cin >> id;
             store.updateProduct(id);
             break;
         }
         case 7:
         {
             store.searchProduct();
             break;
          }
